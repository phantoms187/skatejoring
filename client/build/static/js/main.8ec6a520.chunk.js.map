{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/index.js","store.js","components/create.component.js","components/edit.component.js","components/TableRow.js","components/index.component.js","components/home.component.js","components/eventTableRow.js","components/events.component.js","components/eventCreate.component.js","components/login.component.js","components/layout/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","Create","props","onChangeUserFirstName","bind","onChangeUserLastName","onChangeUserNumber","onChangeUserEmail","onChangeUserPassword","onChangeUserPassword2","onSubmit","first_name","last_name","number","email","password","password2","change","this","setState","target","value","preventDefault","person","post","setTimeout","history","push","class","className","onChange","Component","Edit","get","match","params","id","then","response","data","catch","error","console","log","res","status","send","TableRow","delete","obj","_id","window","location","reload","to","onClick","Index","users","map","object","i","key","colSpan","tableRow","Home","Item","src","alt","Caption","EventTableRow","date","time","weather","color","icon","width","height","autoplay","Events","events","eventTableRow","CreateEvent","onChangeDate","onChangeTime","onChangeLocation","currently","summary","toUpperCase","replace","event","moment","format","Navbar","localStorage","jwtToken","jwt_decode","dispatch","currentTime","Date","now","exp","removeItem","href","App","exact","path","component","Login","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ec6a520.chunk.js","sourcesContent":["import axios from \"axios\";\nconst setAuthToken = token => {\n  if (token) {\n    // Apply authorization token to every request if logged in\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  } else {\n    // Delete auth header\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\nexport default setAuthToken;","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n// Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};","export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import {\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"../actions/types\";\n\nconst isEmpty = require(\"is-empty\");\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n  loading: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        isAuthenticated: !isEmpty(action.payload),\n        user: action.payload\n      };\n    case USER_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n}","import { GET_ERRORS } from \"../actions/types\";\nconst initialState = {};\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducers\";\nimport errorReducer from \"./errorReducers\";\nexport default combineReducers({\n  auth: authReducer,\n  errors: errorReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nexport default store;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\n//Class to create a new user for email distribution\nexport default class Create extends Component {\n  constructor(props) {\n      super(props);\n      //Bind each user attribute\n      this.onChangeUserFirstName = this.onChangeUserFirstName.bind(this);\n      this.onChangeUserLastName = this.onChangeUserLastName.bind(this);\n      this.onChangeUserNumber = this.onChangeUserNumber.bind(this);\n      this.onChangeUserEmail = this.onChangeUserEmail.bind(this);\n      this.onChangeUserPassword = this.onChangeUserPassword.bind(this);\n      this.onChangeUserPassword2 = this.onChangeUserPassword2.bind(this);\n      this.onSubmit = this.onSubmit.bind(this);\n      //Set current state to empty\n      this.state = {\n          first_name: '',\n          last_name: '',\n          number: '',\n          email: '',\n          password: '',\n          password2: ''\n      };\n  }\n  //When input for each is changed, set new state of variable\n   onChangeUserFirstName(change) {\n    this.setState({ first_name: change.target.value });\n  }\n  onChangeUserLastName(change) {\n    this.setState({ last_name: change.target.value });\n  }\n  onChangeUserNumber(change) {\n    this.setState({ number: change.target.value });\n  }\n  onChangeUserEmail(change) {\n    this.setState({ email: change.target.value });\n  }\n  onChangeUserPassword(change) {\n    this.setState({ password: change.target.value });\n  }\n  onChangeUserPassword2(change) {\n    this.setState({ password2: change.target.value });\n  }\n//When the form is submitted, set object to post with axios\n  onSubmit(change) {\n    change.preventDefault();\n    const person = {\n      first_name: this.state.first_name,\n      last_name: this.state.last_name,\n      number: this.state.number,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n    //Send axios post to server to handle mongoDB interaction\n    //axios.post('https://skatejoring-davis.herokuapp.com/users/add', person);\n    //axios.post('https://projectnamenpm-username.c9users.io', person);\n    axios.post('http://localhost:4000/users/add', person);  \n    //Set state back to empty to clear form\n    this.setState({\n      first_name: '',\n      last_name: '',\n      number: '',\n      email: '',\n      password: '',\n      password2: ''\n    });\n    //Go to index page of all users\n    setTimeout(() =>{\n    this.props.history.push('/index');\n    },500);\n  }\n //Render form for create\n  render() {\n    return (\n        <div class=\"title-welcome container\">\n          <div class=\"row\">\n            <div class=\"col-md-8 col-lg-6 offset-lg-3\">\n              <h3>Add New User</h3>\n              <form onSubmit={this.onSubmit}>\n                  <div className=\"form-group\">\n                      <label>First Name:  </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={this.state.first_name}\n                        onChange={this.onChangeUserFirstName}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Last Name:  </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={this.state.last_name}\n                        onChange={this.onChangeUserLastName}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Phone Number: </label>\n                      <input type=\"text\"\n                        className=\"form-control\"\n                        value={this.state.number}\n                        onChange={this.onChangeUserNumber}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>E-mail: </label>\n                      <input type=\"email\"\n                        className=\"form-control\"\n                        value={this.state.email}\n                        onChange={this.onChangeUserEmail}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Password: </label>\n                      <input type=\"password\"\n                        className=\"form-control\"\n                        value={this.state.password}\n                        onChange={this.onChangeUserPassword}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Confirm Password: </label>\n                      <input type=\"password\"\n                        className=\"form-control\"\n                        value={this.state.password2}\n                        onChange={this.onChangeUserPassword2}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <input type=\"submit\" value=\"Register User\" className=\"btn btn-primary\"/>\n                  </div>\n                </form>\n              </div>\n            </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n//Class to edit a user's info\nexport default class Edit extends Component {\n  constructor(props) {\n    super(props);\n    //Bind all page attributes to current state\n      this.onChangeUserFirstName = this.onChangeUserFirstName.bind(this);\n      this.onChangeUserLastName = this.onChangeUserLastName.bind(this);\n      this.onChangeUserNumber = this.onChangeUserNumber.bind(this);\n      this.onChangeUserEmail = this.onChangeUserEmail.bind(this);\n      this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n          first_name: '',\n          last_name: '',\n          number: '',\n          email: ''\n      };\n  }\n//Get user to edit from DB\n  componentDidMount() {\n      axios.get('https://skatejoring-davis.herokuapp.com/users/edit/'+this.props.match.params.id)\n          .then(response => {\n              this.setState({ \n                first_name: response.data.first_name, \n                last_name: response.data.last_name,\n                number: response.data.number,\n                email: response.data.email });\n          })\n          .catch((error) => {\n              console.log(error);\n          });\n    }\n//Set state for each attribute\n  onChangeUserFirstName(change) {\n    this.setState({ first_name: change.target.value });\n  }\n  onChangeUserLastName(change) {\n    this.setState({ last_name: change.target.value });\n  }\n  onChangeUserNumber(change) {\n    this.setState({ number: change.target.value });  \n  }\n  onChangeUserEmail(change) {\n    this.setState({ email: change.target.value });\n  }\n//On submit sent post request to save\n  onSubmit(change) {\n    change.preventDefault();\n    const person = {\n      first_name: this.state.first_name,\n      last_name: this.state.last_name,\n      number: this.state.number,\n      email: this.state.email\n    };\n    axios.post('https://skatejoring-davis.herokuapp.com/users/update/'+this.props.match.params.id, person)\n        .then(res => {\n          res.status(200);\n          res.send(\"User updated\");\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    \n    //Return to Index component\n    this.props.history.push('/index');\n    \n  }\n \n  render() {\n    return (\n    <div class=\"title-welcome container\">\n        <div class=\"row\">\n          <div class=\"col-md-8 col-lg-6 offset-lg-3\">\n            <h3>Edit User Profile</h3>\n              <form onSubmit={this.onSubmit}>\n                  <div className=\"form-group\">\n                      <label>First Name:  </label>\n                      <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        value={this.state.first_name}\n                        onChange={this.onChangeUserFirstName}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Last Name:  </label>\n                      <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        value={this.state.last_name}\n                        onChange={this.onChangeUserLastName}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Number: </label>\n                      <input type=\"text\" \n                        className=\"form-control\"\n                        value={this.state.number}\n                        onChange={this.onChangeUserNumber}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Email: </label>\n                      <input type=\"text\" \n                        className=\"form-control\"\n                        value={this.state.email}\n                        onChange={this.onChangeUserEmail}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <input type=\"submit\" \n                        value=\"Update User\" \n                        className=\"btn btn-primary\"/>\n                  </div>\n              </form>\n          </div>\n        </div>\n      </div>  \n    );\n  }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\n//Class to construct table entries to show users in DB\nclass TableRow extends Component {\n    constructor(props) {\n        super(props);\n        this.delete = this.delete.bind(this);\n    }\n    //Function to send delete info from server\n    delete() {\n        axios.get('https://skatejoring-davis.herokuapp.com/users/delete/'+this.props.obj._id)\n            .then(console.log('Deleted'))\n            .catch(error => console.log(error));\n            window.location.reload();\n    }\n    \n  render() {\n    return (\n        <tr>\n          <td>\n            {this.props.obj.first_name}\n          </td>\n          <td>\n            {this.props.obj.last_name}\n          </td>\n          <td>\n            {this.props.obj.number}\n          </td>\n          <td>\n            {this.props.obj.email}\n          </td>\n          <td>\n            <Link to={\"/edit/\"+this.props.obj._id} className=\"btn btn-primary\">Edit</Link>\n          </td>\n          <td>\n            <Link to={\"/index\"} onClick={this.delete} className=\"btn btn-danger\">Delete</Link>\n          </td>\n        </tr>\n    );\n  }\n}\n\nexport default TableRow;\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport TableRow from './TableRow';\nimport '../App.css';\n//Class to show all users\nexport default class Index extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {users: []};\n    }\n    //Get the users from mongoDB\n    componentDidMount(){\n      axios.get('http://localhost:4000/users/all')\n        .then(response => {\n          this.setState({ users: response.data });\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n    //Create each row from the returned array of users\n    tableRow(){\n      return this.state.users.map((object, i) =>{\n          return <TableRow obj={object} key={i} />;\n      });\n    }\n//Render results\n    render() {\n      return (\n        <div>\n          <h3 class=\"title-welcome\">Users</h3>\n          <table className=\"table table-striped table-hover table-bordered my-table\">\n            <thead>\n              <tr>\n                <th>First Name</th>\n                <th>Last Name</th>\n                <th>Phone Number</th>\n                <th>Email</th>\n                <th colSpan=\"2\">Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              { this.tableRow() }\n            </tbody>\n          </table>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        </div>\n      );\n    }\n  }\n","import '../App.css';\nimport React, { Component } from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\n\nexport default class Home extends Component {\n     render() {\n        return (\n              <Carousel>\n                  <Carousel.Item>\n                    <img\n                      className=\"d-block text-center mx-auto p-3 my-auto\"\n                      src=\"/mia_glow.png\"\n                      alt=\"First slide\"\n                    />\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <Carousel.Caption>\n                      <h3>Welcome to the Club</h3>\n                      <p>Join us at our next event!</p>\n                    </Carousel.Caption>\n                  </Carousel.Item>\n                  <Carousel.Item>\n                    <img\n                      className=\"d-block text-center mx-auto p-3 my-auto\"\n                      src=\"/skatejoring_girl_huskey.png\"\n                      alt=\"skatejoring_girl_huskey.png\"\n                    />\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                  \n                    <Carousel.Caption>\n                      <h3>Fun for Everyone</h3>\n                      <p>Especially the pups!!</p>\n                    </Carousel.Caption>\n                  </Carousel.Item>\n                  <Carousel.Item>\n                    <img\n                      className=\"d-block text-center mx-auto p-3 my-auto\"\n                      src=\"/skatejoring_orange_wheels.png\"\n                      alt=\"Third slide\"\n                    />\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                \n                    <Carousel.Caption>\n                      <h3>Safety Third!</h3>\n                      <p>No sandals allowed.</p>\n                    </Carousel.Caption>\n                  </Carousel.Item>\n                </Carousel>\n        );\n    }\n    \n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n//Import the icons for DarkSky\nimport Skycons from 'react-skycons';\n\n//Class to construct table entries to show events \nclass EventTableRow extends Component {\n    constructor(props) {\n        super(props);\n        this.delete = this.delete.bind(this);\n    }\n    //Function to send delete info from server\n    delete() {\n        axios.get('https://skatejoring-davis.herokuapp.com/events/delete/'+this.props.obj._id)\n            .then(console.log('Deleted'))\n            .catch(error => console.log(error));\n            window.location.reload();\n    }\n    \n    render() {\n        return (\n            <tr>\n              <td>\n                {this.props.obj.date}\n              </td>\n              <td>\n                {this.props.obj.time}\n              </td>\n              <td>\n                {this.props.obj.location}\n              </td>\n              <td>\n                {this.props.obj.weather}\n              </td>\n              <td>\n                <Skycons color='white' icon={this.props.obj.icon} width=\"64\" height=\"64\" autoplay={true} />\n              </td>\n              \n              <td>\n                <Link to={\"/events\"} onClick={this.delete} className=\"btn btn-danger\">Delete</Link>\n              </td>\n            \n            </tr>\n        );\n    }\n}\n\nexport default EventTableRow;\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport EventTableRow from './eventTableRow';\nimport '../App.css';\n//Class to show all events\nexport default class Events extends Component {\n  constructor(props) {\n      super(props);\n      this.state = {events: []};\n    }\n    //Get the events from mongoDB\n    componentDidMount(){\n      axios.get('https://skatejoring-davis.herokuapp.com/events/all')\n        .then(response => {\n          this.setState({ events: response.data });\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n    //Create each row from the returned array of events\n    eventTableRow(){\n      return this.state.events.map((object, i) =>{\n          return <EventTableRow obj={object} key={i} />;\n      });\n    }\n//Render results\n    render() {\n      return (\n        <div>\n          <h3 class=\"title-welcome\">Events</h3>\n          <table className=\"table table-striped table-hover table-bordered my-table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Time</th>\n                <th>Location</th>\n                <th colSpan=\"2\">Weather</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              { this.eventTableRow() }\n            </tbody>\n          </table>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        </div>\n      );\n    }\n  }","import React, { Component } from 'react';\nimport axios from 'axios';\nimport moment from 'moment'\n\n//Class to create a new user for weather distribution\nexport default class CreateEvent extends Component {\n  constructor(props) {\n      super(props);\n      //Bind each user attribute\n      this.onChangeDate = this.onChangeDate.bind(this);\n      this.onChangeTime = this.onChangeTime.bind(this);\n      this.onChangeLocation = this.onChangeLocation.bind(this);\n      this.onSubmit = this.onSubmit.bind(this);\n      //Set current state to empty\n      this.state = {\n          date: '',\n          time: '',\n          location: ''\n      };\n  }\n  \n  //When input for each is changed, set new state of variable\n   onChangeDate(change) {\n    this.setState({ date: change.target.value });\n  }\n  onChangeTime(change) {\n    this.setState({ time: change.target.value });\n  }\n  onChangeLocation(change) {\n    this.setState({ location: change.target.value });  \n  }\n  \n  //Get weather information from DarkSky API\n  componentDidMount() {\n      axios.get('https://skatejoring-davis.herokuapp.com/weather')\n          .then(response => {\n              this.setState({ \n                    weather: response.data.currently.summary, \n                    icon: (response.data.currently.icon).toUpperCase().replace(/-/g,'_'),\n                });\n          })\n          .catch((error) => {\n              console.log(error);\n          });\n    }\n \n//When the form is submitted, set object to post with axios\n  onSubmit(change) {\n    change.preventDefault();\n    const event = {\n      date: moment(this.state.date, 'YYYY-MM-DD').format('dddd, MMMM Do YYYY'),\n      time: moment(this.state.time, 'HH:mm a').format('h:mm A'),\n      location: this.state.location,\n      weather: this.state.weather,\n      icon: this.state.icon\n    };\n    //Send axios post to server to handle mongoDB interaction\n    axios.post('https://skatejoring-davis.herokuapp.com/events/add', event);\n    //Set state back to empty to clear form\n    this.setState({\n      date: '',\n      time: '',\n      location: '',\n      weather: '',\n      icon: '',\n    });\n    //Go to index page of all events with delay for database to update first\n    setTimeout(() =>{\n    this.props.history.push('/events');\n    },500);\n     \n  }\n //Render form for create \n  render() {\n    return (\n        <div class=\"title-welcome container\">\n          <div class=\"row\">\n            <div class=\"col-md-8 col-lg-6 offset-lg-3\">\n              <h3>Add New Event</h3>\n              <form onSubmit={this.onSubmit}>\n                  <div className=\"form-group\">\n                      <label>Date:  </label>\n                      <input \n                        type=\"date\" \n                        className=\"form-control\" \n                        value={this.state.date}\n                        onChange={this.onChangeDate}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Time:  </label>\n                      <input \n                        type=\"time\" \n                        className=\"form-control\" \n                        value={this.state.time}\n                        onChange={this.onChangeTime}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Location: </label>\n                      <input type=\"text\" \n                        className=\"form-control\"\n                        value={this.state.location}\n                        onChange={this.onChangeLocation}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <input type=\"submit\" value=\"Register Event\" className=\"btn btn-primary\"/>\n                  </div>\n                </form>\n              </div>\n            </div>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n        </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\n//import axios from 'axios';\n\n\n//Class to create a new user for email distribution\nexport default class Create extends Component {\n  constructor(props) {\n      super(props);\n      //Bind each user attribute\n      this.onChangeUserEmail = this.onChangeUserEmail.bind(this);\n      this.onChangeUserPassword = this.onChangeUserPassword.bind(this);\n      \n      this.onSubmit = this.onSubmit.bind(this);\n      //Set current state to empty\n      this.state = {\n          email: '',\n          password: ''\n      };\n  }\n  //When input for each is changed, set new state of variable\n  \n  onChangeUserEmail(change) {\n    this.setState({ email: change.target.value });\n  }\n  onChangeUserPassword(change) {\n    this.setState({ password: change.target.value });\n  }\n  \n//When the form is submitted, set object to post with axios\n  onSubmit(change) {\n    change.preventDefault();\n   /* const person = {\n      email: this.state.email,\n      password: this.state.password\n    };*/\n    //Send axios post to server to handle mongoDB interaction\n    //axios.post('https://skatejoring-davis.herokuapp.com/users/add', person);\n    //Set state back to empty to clear form\n    this.setState({\n      email: '',\n      password: '',\n    });\n    //Go to index page of all users\n    setTimeout(() =>{\n    this.props.history.push('/index');\n    },500);\n     \n  }\n //Render form for create \n  render() {\n    return (\n        <div class=\"title-welcome container\">\n          <div class=\"row\">\n            <div class=\"col-md-8 col-lg-6 offset-lg-3\">\n              <h3>Login</h3>\n              <form onSubmit={this.onSubmit}>\n                  <div className=\"form-group\">\n                      <label>E-mail: </label>\n                      <input type=\"email\" \n                        className=\"form-control\"\n                        value={this.state.email}\n                        onChange={this.onChangeUserEmail}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Password: </label>\n                      <input type=\"password\" \n                        className=\"form-control\"\n                        value={this.state.password}\n                        onChange={this.onChangeUserPassword}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <input type=\"submit\" value=\"Log In\" className=\"btn btn-success\"/>\n                  </div>\n                </form>\n              </div>\n            </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nclass Navbar extends Component {\n  render() {\n    return (\n\n      <nav class=\"navbar navbar-expand-md navbar-dark bg-dark nav-bkgr\">\n          <ul class=\"navbar-nav mr-auto\">\n            <li class=\"nav-item active\">\n                <Link to={'/'} className=\"nav-link my-nav-link\">Skatejoring</Link>\n            </li>\n            <li class=\"nav-item my-nav-link\">\n               <Link to={'/index'} className=\"nav-link \">Users</Link>\n            </li>\n            <li class=\"nav-item my-nav-link\">\n               <Link to={'/events'} className=\"nav-link \">Events</Link>\n            </li>\n          </ul>\n          <ul class=\"navbar-nav float-right\">\n             <li class=\"nav-item\">\n                <Link to={'/create'} className=\"nav-link my-nav-link\">Email Signup</Link>\n            </li>\n            <li class=\"nav-item\">\n                <Link to={'/createEvent'} className=\"nav-link my-nav-link\">Add New Event</Link>\n            </li>\n            <li class=\"nav-item\">\n                <Link to={'/login'} className=\"nav-link my-nav-link\">Login</Link>\n            </li>\n          </ul>\n      </nav>\n    );\n  }\n}\nexport default Navbar;\n","import './App.css';\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\n\n//import { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport Create from './components/create.component';\nimport Edit from './components/edit.component';\nimport Index from './components/index.component';\nimport Home from './components/home.component';\nimport Events from './components/events.component';\nimport CreateEvent from './components/eventCreate.component';\nimport Login from './components/login.component';\nimport Navbar from \"./components/layout/Navbar\";\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container green-bkgr\">\n          <Navbar />\n        <br/>\n        <br/>\n        <br/>\n          <h2 class= \"title-welcome\">Skatejoring Social Club</h2>\n        <br/>\n          <Switch>\n              <Route exact path='/login' component={ Login } />\n              <Route exact path='/events' component={ Events } />\n              <Route exact path='/createEvent' component={ CreateEvent } />\n              <Route exact path='/create' component={ Create } />\n              <Route path='/edit/:id' component={ Edit } />\n              <Route path='/index' component={ Index } />\n              <Route path='/' component={ Home } />\n          </Switch>\n          <footer class=\"container\">\n            <p class=\"text-white\">&copy; 2019 DW Designs         <a href=\"https://darksky.net/poweredby/\"> Powered by Dark Sky</a></p>\n          </footer>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>, document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}